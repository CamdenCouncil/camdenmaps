
;(function() { 
    "use strict";
    // module for converting XML to JSON 
    var xml2js = require('xml2js');
    var parser = new xml2js.Parser();
    var config = require("../config/serverConfig.js");
    var cache = require("../config/cache.js");
    var cap = require("../lib/capitalize.js");
    var serviceArrays = config.map.serviceArrays;
    //strips html from obj (depth of 1 only)
    var clean = require("../lib/cleanobj.js");  
    var parsers = require("../lib/parsers.js");

    function toTitleCase(str) {
        return str.replace(/\w\S*/g, function(txt) {return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();});
    }

    function replaceSlashes(str) {
        return str.replace("/", " and ");
    }


    module.exports = {

        convertLocalInformation: function convertLocalInformation (err, res, req, rep) {

            var xml, 
                response;

            xml = "";
            response = {};
            
            if (err) {
                console.log(err);
                return rep({error: "Upstream Error", message: "Sorry, it looks like something went wrong on an upstream server"});
            }
            
            res.on("data", function(data) {
                xml = xml + data;
            });

            res.on("end", function() {

                parser.parseString(xml, function(err, result) {
                    if (err) {
                        console.log(err);
                        return rep({error: "Service Not Found", message: "Sorry, we could not find the right information on that location"});
                    }

                    response.location = {};
                    if(typeof result !== "undefined" && result.hasOwnProperty("Locations") && result.Locations.hasOwnProperty("AddressSearchResults")) {
                        response.location.Area = result.Locations.AddressSearchResults[0].$.sPostcode;
                        response.location.Latitude = result.Locations.AddressSearchResults[0].$.Latitude;
                        response.location.Longitude = result.Locations.AddressSearchResults[0].$.Longitude;
                        response.location.BuildingName = result.Locations.AddressSearchResults[0].$.sBuildingName; 
                        response.location.Street = result.Locations.AddressSearchResults[0].$.sStreet; 
                    } else {
                        return rep({error: "Service Not Found", message: "Sorry, we could not find the right information on that location"});
                    }
                    response.information = {};
                    if(result.Locations.hasOwnProperty("LocalInformation") && result.Locations.LocalInformation[0].hasOwnProperty("Table")) {
                        result.Locations.LocalInformation[0].Table.map(function(p) {
                            response.information[p.$.TableDesc] = {};
                            response.information[p.$.TableDesc].Value = p.Object[0].$.ObjectDesc;
                            response.information[p.$.TableDesc].Url = p.Object[0].$.ObjectLink;
                        });
                    } else {
                        return rep({error: "Service Not Found", message: "Sorry, we could not find the right information on that location"});
                    }
                    response = clean(response);
                    
                    if(!response.location.hasOwnProperty("Latitude")) {
                        return rep({error: "Upstream Error", message: "Sorry, that postcode looks invalid" });
                    } 
        
                    return rep(response);
                });
            });
        },
        convertStreetworks: function convertStreetworks (err, res, req, rep) {

            var xml, 
                response;

            xml = "";
            response = {};
            
            if (err) {
                console.log(err);
                return rep({error: "Upstream Error", message: "Sorry, it looks like something went wrong on an upstream server"});
            }
            
            res.on("data", function(data) {
                xml = xml + data;
            });

            res.on("end", function() {
                parser.parseString(xml, function(err, result) {
                    //TODO: move the error messages to an object so only written once
                    console.log(err);
                    if (err) {
                        console.log(err);
                        return rep({error: "Service Not Found", message: "Sorry, we could not find the right information on that service or location"});
                    }
                    if (result.hasOwnProperty("Locations") && typeof result !== "undefined" && result.hasOwnProperty("Locations") && result.Locations.hasOwnProperty("StreetWorks")) {
                        console.log(result.Locations.StreetWorks[0]);
                        response.location = {};
                        response.location.Area = result.Locations.$.postcode; 
                        response.location.Latitude = result.Locations.$.Lat;
                        response.location.Longitude = result.Locations.$.Lng;
                        response.properties = [];
                        result.Locations.StreetWorks.map(function(p) {
                            var formattedProperty = {};
                            
                            formattedProperty.Longitude = p.$.Lng;
                            formattedProperty.Latitude = p.$.Lat;
                            formattedProperty.LAref = p.$.LAref;
                            formattedProperty.externalref = p.$.externalref;
                            formattedProperty.display = {};
                            formattedProperty.display.Organisation = p.$.Organisation;
                            formattedProperty.display.Name = replaceSlashes(p.$.Street) + " - " + p.$.externalref.split("-")[p.$.externalref.split("-").length - 1];
                            formattedProperty.display.StartDate = p.$.StartDate;
                            formattedProperty.display.EndDate = p.$.EndDate;
                            formattedProperty.display.Telephone = p.$.Telephone;
                            formattedProperty.display.Street = p.$.Street;
                            formattedProperty.display.Description = p.$.Description;
                            formattedProperty.display = clean(formattedProperty.display)
                            formattedProperty = clean(formattedProperty);
                            response.properties.push(formattedProperty);
                        });
                    } else {
                        return rep({error: "Service Not Found", message: "Sorry, we could not find the right information on that service or location"});
                    }
                    response = clean(response);
                    
                    if(!response.location.hasOwnProperty("Latitude")) {
                        return rep({error: "Upstream Error", message: "Sorry, that postcode looks invalid" });
                    } 
                    
                    return rep(response);
                });
            });
        },
        convertToJson: function convertToJson (err, res, req, rep) {

            var xml, 
                response, 
                key, 
                service,
                parser;
            
            xml = "";
            response = {};
            key = req.raw.req.url;
            service = cap(req.params.service);

            if (err) {
                console.log(err);
                return rep({error: "Upstream Error", message: "Sorry, it looks like something went wrong on an upstream server"});
            }
            

            if (serviceArrays.recycling.indexOf(service) > -1) {
                 
            } else if (serviceArrays.parking.indexOf(service) > -1) {

            } else {

            }


            if (serviceArrays.recycling.indexOf(service) > -1) {
                xml = "";
                response = {};           

                res.on("data", function(data) {
                    xml = xml + data;
                });

                res.on("end", function() {
                    response = parsers.recyclingApiParser(xml);
                        
                    cache.set(key, response, function (err, success) {
                        if (!err && success) {
                            return rep(response);
                        } else {
                            console.log(err);
                            return rep(response);
                        }
                    });
                        
               });

            } else if (serviceArrays.parking.indexOf(service) > -1) {
                
                xml = "";
                
                res.on("data", function(data) {
                    xml = xml + data;                
             });

                res.on("end", function() {
                    response = parsers.parkingApiParser(xml);
                        
                    if(!response.location.hasOwnProperty("Latitude")) {
                        return rep({error: "Upstream Error", message: "Sorry, that postcode looks invalid" });
                    } 

                    cache.set(key, response, function (err, success) {
                        if (!err && success) {
                            return rep(response);
                        } else {
                            console.log(err);
                            return rep(response);
                        }
                    });
                });
            
            } else {
                
                xml = "";

                res.on('data', function(data){
                  xml = xml + data;
                });

                res.on('end', function(){
                    response = parsers.nearestApiParser(xml);

                    if(!response.location.hasOwnProperty("Latitude")) {
                        return rep({error: "Upstream Error", message: "Sorry, that postcode looks invalid" });
                    } 

                    cache.set(key, response, function (err, success) {
                        if (!err && success) {
                            return rep(response);
                        } else {
                            server.log("error", "Error caching the response from /services/{serviceId}");
                            return rep(response);
                        }
                    });
                });
            }

        }
        
    };
}());

